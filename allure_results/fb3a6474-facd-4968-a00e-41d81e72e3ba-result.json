{"name": "Проверка НЕуспешной регистрации курьера с уже существующими данными - корректный код ошибки", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable", "trace": "func = <staticmethod(<function TestDataHelper.generate_registration_body at 0x1050316c0>)>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n>           sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature,\n                                           eval_str=False)\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/inspect.py:1388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/inspect.py:2564: in _signature_from_callable\n    return _signature_from_builtin(sigcls, obj,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'inspect.Signature'>, func = <staticmethod(<function TestDataHelper.generate_registration_body at 0x1050316c0>)>, skip_bound_arg = False\n\n    def _signature_from_builtin(cls, func, skip_bound_arg=True):\n        \"\"\"Private helper function to get signature for\n        builtin callables.\n        \"\"\"\n    \n        if not _signature_is_builtin(func):\n            raise TypeError(\"{!r} is not a Python builtin \"\n                            \"function\".format(func))\n    \n        s = getattr(func, \"__text_signature__\", None)\n        if not s:\n>           raise ValueError(\"no signature found for builtin {!r}\".format(func))\nE           ValueError: no signature found for builtin <staticmethod(<function TestDataHelper.generate_registration_body at 0x1050316c0>)>\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/inspect.py:2363: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_registration_courier.TestRegistrationCoruier object at 0x105038290>\n\n    @allure.title('Проверка НЕуспешной регистрации курьера с уже существующими данными - корректный код ошибки')\n    @allure.description(\n        'Проверить НЕуспешность регистрации нового курьера: код ответа 409 - негативный сценарий')\n    def test_failed_registration_courier_existed_error_code(self):\n>       body = TestDataHelper.generate_registration_body()\n\nTests/test_registration_courier.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/allure_commons/utils.py:231: in func_parameters\n    arg_spec = inspect.getfullargspec(func)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfunc = <staticmethod(<function TestDataHelper.generate_registration_body at 0x1050316c0>)>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n            sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature,\n                                           eval_str=False)\n        except Exception as ex:\n            # Most of the times 'signature' will raise ValueError.\n            # But, it can also raise AttributeError, and, maybe something\n            # else. So to be fully backwards compatible, we catch all\n            # possible exceptions here, and reraise a TypeError.\n>           raise TypeError('unsupported callable') from ex\nE           TypeError: unsupported callable\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/inspect.py:1398: TypeError"}, "description": "Проверить НЕуспешность регистрации нового курьера: код ответа 409 - негативный сценарий", "start": 1726085337515, "stop": 1726085337515, "uuid": "c3728583-c146-4fa3-96b4-d4fb051e2f32", "historyId": "6178f22c19442b5c5c22e23573fd0a9a", "testCaseId": "6178f22c19442b5c5c22e23573fd0a9a", "fullName": "Tests.test_registration_courier.TestRegistrationCoruier#test_failed_registration_courier_existed_error_code", "labels": [{"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_registration_courier"}, {"name": "subSuite", "value": "TestRegistrationCoruier"}, {"name": "host", "value": "Olgas-MacBook-Air.local"}, {"name": "thread", "value": "86120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_registration_courier"}]}